generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model departments {
  id              Int      @id @default(autoincrement())
  department_name String   @unique
  department_code String?
  description     String?
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  risks           risks[]
  users           users[]
}

model risk_categories {
  id               Int      @id @default(autoincrement())
  category_name    String   @unique
  category_code    String?
  description      String?
  risk_register_id Int?
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  risks            risks[]
}

model risks {
  id                                 Int              @id @default(autoincrement())
  risk_code                          String           @unique
  risk_title                         String
  risk_description                   String
  what_can_happen                    String?
  risk_register_id                   Int?
  risk_category_id                   Int?
  department_id                      Int?
  risk_owner_id                      Int?
  risk_manager_id                    Int?
  system_user_id                     Int?
  status                             String           @default("Submitted")
  priority                           String           @default("Medium")
  identified_date                    DateTime?
  last_review_date                   DateTime?
  next_review_date                   DateTime?
  documentation_status               String           @default("Draft")
  created_by_id                      Int?
  created_at                         DateTime         @default(now())
  updated_by_id                      Int?
  updated_at                         DateTime         @default(now())
  
  // New fields for user risk submissions
  date_reported                      DateTime         @default(now())
  attachments                        Json?            // Array of attachment URLs/paths
  submitted_by                       Int              // User who submitted the risk
  
  // New fields for risk owner evaluation
  assessment_notes                   String?
  severity                           String?          // Low, Medium, High
  category_update                    String?
  status_update                      String?          // Open, In Review, Mitigated, Escalated
  evaluated_by                       Int?             // Risk Owner who evaluated
  date_evaluated                     DateTime?
  
  // Workflow management fields
  workflow_step                      Int              @default(1)  // Current step in 6-step process
  workflow_status                    Json?            // Detailed workflow status tracking
  treatment_plan                     String?          // Risk treatment plan
  action_items                       Json?            // Array of action items with deadlines
  monitoring_kpis                    Json?            // Key performance indicators for monitoring
  review_frequency                   String?          // How often to review this risk
  escalation_required                Boolean          @default(false)
  escalation_reason                  String?
  closure_date                       DateTime?
  closure_reason                     String?
  
  // Risk calculation fields
  likelihood                         Decimal?         @db.Decimal(5,3)
  impact                             Decimal?         @db.Decimal(5,3)
  calculated_risk_score              Decimal?         @db.Decimal(6,3)
  risk_level                         String?
  financial_impact                   Decimal?         @db.Decimal(5,3)
  reputation_impact                  Decimal?         @db.Decimal(5,3)
  legal_impact                       Decimal?         @db.Decimal(5,3)
  environmental_impact               Decimal?         @db.Decimal(5,3)
  time_impact                        Decimal?         @db.Decimal(5,3)
  other_impact                       Decimal?         @db.Decimal(5,3)
  financial_risk_score               Decimal?         @db.Decimal(6,3)
  reputation_risk_score              Decimal?         @db.Decimal(6,3)
  legal_risk_score                   Decimal?         @db.Decimal(6,3)
  environmental_risk_score           Decimal?         @db.Decimal(6,3)
  time_risk_score                    Decimal?         @db.Decimal(6,3)
  other_risk_score                   Decimal?         @db.Decimal(6,3)
  highest_risk_score                 Decimal?         @db.Decimal(6,3)
  residual_likelihood                Decimal?         @db.Decimal(5,3)
  residual_impact                    Decimal?         @db.Decimal(5,3)
  residual_score                     Decimal?         @db.Decimal(6,3)
  treatment_strategy                 String?
  
  users_risks_created_by_idTousers   users?           @relation("risks_created_by_idTousers", fields: [created_by_id], references: [id])
  departments                        departments?     @relation(fields: [department_id], references: [id])
  risk_categories                    risk_categories? @relation(fields: [risk_category_id], references: [id])
  users_risks_risk_manager_idTousers users?           @relation("risks_risk_manager_idTousers", fields: [risk_manager_id], references: [id])
  users_risks_risk_owner_idTousers   users?           @relation("risks_risk_owner_idTousers", fields: [risk_owner_id], references: [id])
  users_risks_updated_by_idTousers   users?           @relation("risks_updated_by_idTousers", fields: [updated_by_id], references: [id])
  users_risks_submitted_byTousers    users?           @relation("risks_submitted_byTousers", fields: [submitted_by], references: [id])
  users_risks_evaluated_byTousers    users?           @relation("risks_evaluated_byTousers", fields: [evaluated_by], references: [id])
}

model roles {
  id          Int          @id @default(autoincrement())
  role_name   String       @unique
  description String?
  permissions Json?        // Detailed permissions object
  default_dashboard_sections Json? // Default dashboard sections for this role
  created_at  DateTime     @default(now())
  user_roles  user_roles[]
}

// New model for dashboard sections
model dashboard_sections {
  id          Int      @id @default(autoincrement())
  section_name String  @unique
  display_name String
  description String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
}

model user_roles {
  id      Int   @id @default(autoincrement())
  user_id Int
  role_id Int
  roles   roles @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model users {
  id                                 Int          @id @default(autoincrement())
  employee_id                        String       @unique
  first_name                         String
  last_name                          String
  email                              String       @unique
  position_id                        Int?
  department_id                      Int?
  hire_date                          DateTime?
  employment_status                  String       @default("Active")
  password_hash                      String?
  username                           String?      @unique
  status                             String       @default("pending")
  email_verified                     Boolean      @default(false)
  verification_token                 String?
  // Role-based access control fields
  assigned_role                      String?      // Direct role assignment for quick access
  allowed_dashboard_sections        Json?        // Array of allowed dashboard sections
  permissions                        Json?        // Detailed permissions object
  created_at                         DateTime     @default(now())
  risks_risks_created_by_idTousers   risks[]      @relation("risks_created_by_idTousers")
  risks_risks_risk_manager_idTousers risks[]      @relation("risks_risk_manager_idTousers")
  risks_risks_risk_owner_idTousers   risks[]      @relation("risks_risk_owner_idTousers")
  risks_risks_updated_by_idTousers   risks[]      @relation("risks_updated_by_idTousers")
  risks_risks_submitted_byTousers    risks[]      @relation("risks_submitted_byTousers")
  risks_risks_evaluated_byTousers    risks[]      @relation("risks_evaluated_byTousers")
  user_roles                         user_roles[]
  departments                        departments? @relation(fields: [department_id], references: [id])
}
